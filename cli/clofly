#!/usr/bin/env node
'use strict';

var fs          = require('fs');
var crypto      = require('crypto');
var path        = require('path');
var request     = require('request');
var config      = require('./config.json');
var expandTilde = require('expand-tilde');

try {
    config = require('./config.local.json');
	console.log('Local config file is found');
} catch (ex) {
}

var argv        = require('yargs')
    .usage('Usage: $0 <command> [options]')
    .command({
        command: 'start <filename>',
        aliases: ['run', 'deploy'],
        desc: 'Start running an user function on clofly',
        handler: (argv) => {
            commandStart(argv.filename);
        }
    })
    .command({
        command: 'stop <function_name>',
        desc: 'Stop running an user function on clofly',
        handler: (argv) => {
            commandStop(argv.user_function_name);
        }
    })
    .command('*', 'invalid command', () => {}, (argv) => {
        console.log('Invalid command')
    })
    .example('$0 start hello.js', 'Start running hello function on clofly')
    .demandCommand()
    .help('h')
    .alias('h', 'help')
    .argv;

var nRetries    = 1;
var cookie      = null;

/*
 * Command: start
 */
function commandStart(filename) {

    var fname = path.basename(filename).split('.')[0];
    var userFunction = readFunctionFromFile(filename);

    console.log('Uploading fname: ' + fname);
    uploadFunction(fname, userFunction);

}

function generateFid() {
    return crypto.randomBytes(config.FID_LENGTH).toString('hex');
}

function readFunctionFromFile(filename) {

    if(!fs.existsSync(filename)) {
        console.log('File not exists: ' + filename);
        process.exit(1);
    }

    return fs.readFileSync(filename, 'utf8');

}

function uploadFunction(fname, userFunction) {

    var params = {
        fname: fname,
        code: userFunction
    }

    request.post(

        config.API_URL + 'upload',
        {
            json: params,
            headers: { Cookie: cookie }
        },

        function (error, response, body) {
            if (!error && response.statusCode == 200) {
                // OK
                console.log(body);
            } else if(!error && response.statusCode == 401){
                // Unauthorized
                login(uploadFunction, [fname, userFunction]);
            } else {
                console.log('Error: ' + error);
                console.log(response);
            }
        }

    );

}

function login(callback, callbackParams) {

    if(nRetries >= 1) {
        nRetries --;
    } else {
        console.log('Login succeed, but operation failed');
        process.exit(1);
    }

    var userConfigPath = expandTilde(config.USER_CONFIG);

	try {
		fs.statSync(userConfigPath);
		console.log('Config file exists at ' + config.USER_CONFIG);
	} catch (e) {
        console.log('Please provide valid username/password file at '
            + config.USER_CONFIG);
        process.exit(1);
	}

    var userConfig  = require(userConfigPath);

    var params = {
        username: userConfig.username,
        password: userConfig.password
    }

    request.post(

        config.API_URL + 'login',
        { json: params },

        function (error, response, body) {
            if (!error && response.statusCode == 200) {
                // OK
                console.log('Login succeed');
                cookie = response.headers['set-cookie']
                // try the operation again
                callback.apply(this, callbackParams);
            } else {
                // Failed
                console.log('Error: ' + error);
                console.log(response);
            }
        }

    );

}

/*
 * Command: stop
 */
function commandStop(userFunctionName) {
    // TODO
    console.log('Stopping ' + userFunctionName + ' is not completed');
}
